doctype html
html
  head
    title Playback - Test
    link(href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" rel="stylesheet" type="text/css")
    link(rel='stylesheet', href='/stylesheet/index.css') 
  body
    .container
      #title_container
        h1 Fleet-Track
        h6 Real-time fleet tracking
      #map
    script(src='http://code.jquery.com/jquery-1.11.0.js')
    script(src='http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')
    script(src='/socket.io/socket.io.js')
    script.
      var socket = io();
      var map = L.map('map', {center: [37.808034, -122.456333], zoom: 10 });
      L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
        maxZoom: 20
      }).addTo(map);

      var controlLayer = L.control.layers(null, null, {collapsed: false}).addTo(map);
      L.control.scale().addTo(map);

      map.on('moveend', function(e){
        if(boats.length != 0){
          for(var i=0; i<boats.length; i++){
            if(boats[i].positions.length >= 2){
              boats[i].marker.move(boats[i].positions[1].latLng, 0);
            }
          }
        }
      });
      map.on('zoomend', function(e){
        if(boats.length != 0){
          for(var i=0; i<boats.length; i++){
            if(boats[i].positions.length >= 2){ 
              boats[i].marker.move(boats[i].positions[1].latLng, 0);
            }
          }
        }
      });

      var Boat = function(data){
        this.userId = data.userId;
        this.username = data.username;
        this.positions = [];
        this.marker = L.Marker.moveableMarker([data.lat, data.lng], 0).addTo(map);
        this.init = false;
        //this.track = L.polyline([]).addTo(map);
      }

      Boat.prototype = {
        initialize: function(){
          //run on first position, init map controls
          this.addLayer();
          this.init = true;
        },
        newPosition: function(data){
          if(this.init === false){
            this.initialize();
            this.init = true;
          }

          this.positions.push({latLng: [data.lat, data.lng], timestamp: data.timestamp});

          if(this.positions.length > 2){
            var oldPos = this.positions[1]
              , newPos = this.positions[2]

            var transTime = newPos.timestamp - oldPos.timestamp;

            this.marker.move(oldPos.latLng, transTime, this._getPopup(data));
            //this.track.addLatLng(this.positions[0].latLng);
            this.positions.shift();
          }
        },
        _getPopup: function(data){
          return '<b>' + data.username + '</b><br>' +
            'sog: ' + data.sog + '<br>' +
            'cog: ' + data.cog + '<br>' 
        },
        addLayer: function(){
          controlLayer.addOverlay(this.marker, '<b>' + this.username + '</b>');
        },
        removeLayer: function(){
          controlLayer.removeLayer(this.marker);
          map.removeLayer(this.marker);
        }
      }

      var boats = [];

      socket.on('userDisconnect', function(data){
        console.log('dropped: ' + data);
        for(var i=0; i<boats.length; i++){
          if(data == boats[i].userId){
            boats[i].removeLayer();
            boats.splice(i, 1);
            return false;
          }
        }
      });

      socket.on('position', function(data){

        for(var i=0; i<boats.length; i++){
          if(data.userId == boats[i].userId){
            boats[i].newPosition(data);
            return false;
          }
        }

        var newBoat = new Boat(data);
        boats.push(newBoat);

      });

      L.Marker.MoveableMarker = L.Marker.extend({
          initialize: function (startLatLng, options, feature) {    
              var marker_options = options.marker || {};

              if (jQuery.isFunction(marker_options)){        
                  marker_options = marker_options(feature);
              }
              
              L.Marker.prototype.initialize.call(this, startLatLng, marker_options);
              
              this.popupContent = '';

              if (marker_options.getPopup){
                  this.popupContent = marker_options.getPopup(feature);            
              }
              
              this.bindPopup(this.getPopupContent() + startLatLng.toString());
          },
          
          getPopupContent: function(){
              if (this.popupContent != ''){
                  return '<b>' + this.popupContent + '</b><br/>'
              }
              
              return '';
          },

          move: function (latLng, transitionTime, popup) {
              // Only if CSS3 transitions are supported
                //transitionTime = transitionTime * 1000;
              
              console.log(transitionTime)
              if (L.DomUtil.TRANSITION) {
                  if (this._icon) { 
                      this._icon.style[L.DomUtil.TRANSITION] = 'all ' + transitionTime + 'ms linear'; 
                      if (this._popup && this._popup._wrapper)
                          this._popup._wrapper.style[L.DomUtil.TRANSITION] = 'all ' + transitionTime + 'ms linear'; 
                  }
                  if (this._shadow) { 
                      this._shadow.style[L.DomUtil.TRANSITION] = 'all ' + transitionTime + 'ms linear'; 
                  }
              }
              this.setLatLng(latLng);
              if (this._popup && transitionTime != 0){
                  this._popup.setContent(this.getPopupContent() + popup);
              }    
          }
      });

      L.Marker.moveableMarker = function(latLng, options, features){
        return new L.Marker.MoveableMarker(latLng, options, features);
      };
